{"version":3,"file":"atomico.js","sources":["../src/constants.js","../src/utils.js","../src/vdom.js","../src/diff.js","../src/element.js"],"sourcesContent":["export const ELEMENT = \"Atomico\";\r\nexport const MOUNT = \"elementMount\";\r\nexport const UNMOUNT = \"elementUnmount\";\r\nexport const RECEIVE_PROPS = \"elementReceiveProps\";\r\n","export function getProps(props, element) {\r\n    let data = {};\r\n    for (let i = 0; i < props.length; i++) {\r\n        let prop = props[i],\r\n            value =\r\n                element instanceof HTMLElement\r\n                    ? element.getAttribute(prop)\r\n                    : element[prop];\r\n\r\n        data[\r\n            prop.replace(/-+([\\w])/g, (all, letter) => letter.toUpperCase())\r\n        ] = /^json-/.test(prop) ? JSON.parse(value) : value;\r\n    }\r\n    return data;\r\n}\r\n\r\nexport function root(parent) {\r\n    return parent.shadowRoot || parent;\r\n}\r\nexport function remove(parent, child) {\r\n    root(parent).removeChild(child);\r\n}\r\n\r\nexport function append(parent, child) {\r\n    root(parent).appendChild(child);\r\n}\r\n\r\nexport function replace(parent, newChild, oldChild) {\r\n    root(parent).replaceChild(newChild, oldChild);\r\n}\r\n","/**\r\n * Create an instance of a virtual node\r\n * @param {*} tag - be social to the tagName\r\n * @param {*} props - is associated with the attributes of the tag\r\n * @param  {...*} children - the children associated with the tag\r\n * @return {VDom}\r\n */\r\nexport function h(tag, props, ...children) {\r\n    return new VDom(tag, props, concat(children));\r\n}\r\n/**\r\n * Create an instance of a virtual node\r\n * @param {*} tag - be social to the tagName\r\n * @param {*} props - is associated with the attributes of the tag\r\n * @param  {...*} children - the children associated with the tag\r\n */\r\nexport function VDom(tag, props, children) {\r\n    this.tag = tag;\r\n    this.props = props || {};\r\n    this.children = children || [];\r\n}\r\n/**\r\n *\r\n * @param {*} value\r\n * @return {Boolean}\r\n */\r\nexport function isVDom(value) {\r\n    return typeof value === \"object\" && value instanceof VDom;\r\n}\r\n/**\r\n * prepares the children associated with virtual dom, managing to simplify the algorithm of diff\r\n * @param {*} children - list of children associated with the virtual dom\r\n * @param {*} merge - array that concatenates all the children independent of the depth of the array\r\n * @return {Array}\r\n */\r\nexport function concat(children, merge = []) {\r\n    for (let i = 0; i < children.length; i++) {\r\n        let child = children[i];\r\n        Array.isArray(child)\r\n            ? concat(child, merge)\r\n            : merge.push(isVDom(child) ? child : new VDom(\"\", {}, child || \"\"));\r\n    }\r\n    return merge;\r\n}\r\n","import { RECEIVE_PROPS, ELEMENT } from \"./constants\";\r\n\r\nimport { remove, append, replace, root } from \"./utils\";\r\nimport { VDom, h } from \"./vdom\";\r\n/**\r\n * compares the attributes associated with the 2 render states\r\n * @param {HTMLELement} node\r\n * @param {Object} prev - properties that the node already has\r\n * @param {Object} next - object with the new properties to define the node\r\n * @param {Boolean} svg - define if the html element is a svg\r\n * @param {Object} props - allows to define if the instance belongs to a component, if so it\r\n *                         will rescue the properties associated to the method `static get props`\r\n *                         through this variable, manages to transfer mutations and new children\r\n *                         associated with it to the component.\r\n */\r\nexport function diffProps(node, prev, next, svg, props) {\r\n    // generates a list of the existing attributes in both versions\r\n    let keys = Object.keys(prev).concat(Object.keys(next));\r\n\r\n    for (let i = 0; i < keys.length; i++) {\r\n        let prop = keys[i];\r\n        if (prev[prop] !== next[prop]) {\r\n            if (props && node._props.indexOf(prop) > -1) {\r\n                props[prop] = next[prop];\r\n                continue;\r\n            }\r\n            if (\r\n                typeof next[prop] === \"function\" ||\r\n                typeof prev[prop] === \"function\"\r\n            ) {\r\n                if (prev[prop]) node.removeEventListener(prop, prev[prop]);\r\n                node.addEventListener(prop, next[prop]);\r\n            } else if (prop in next) {\r\n                if ((prop in node && !svg) || (svg && prop === \"style\")) {\r\n                    if (prop === \"style\") {\r\n                        if (typeof next[prop] === \"object\") {\r\n                            for (let index in next[prop]) {\r\n                                node.style[index] = next[prop][index];\r\n                            }\r\n                        } else {\r\n                            node.style.cssText = next[prop];\r\n                        }\r\n                    } else {\r\n                        node[prop] = next[prop];\r\n                    }\r\n                } else {\r\n                    svg\r\n                        ? node.setAttributeNS(null, prop, next[prop])\r\n                        : node.setAttribute(prop, next[prop]);\r\n                }\r\n            } else {\r\n                node.removeAttribute(prop);\r\n            }\r\n        }\r\n    }\r\n    if (props) node.dispatch(RECEIVE_PROPS, props);\r\n}\r\n/**\r\n * It allows to compare the 2 states of the render\r\n * @param {HTMLELement} parent - will receive the changes that the diff process determines\r\n * @param {Array} master - Previous state of the render\r\n * @param {Array} commit - Next render state\r\n * @param {Boolean} svg - define if the html element is a svg\r\n */\r\nexport function diff(parent, master, commit, svg) {\r\n    let children = parent.childNodes || [],\r\n        length = Math.max(master.length, commit.length);\r\n    for (let i = 0; i < length; i++) {\r\n        let prev = master[i] || new VDom(),\r\n            next = commit[i],\r\n            node = children[i];\r\n\r\n        if (next) {\r\n            let cursor = node;\r\n            svg = svg || next.tag === \"svg\";\r\n            if (prev.tag !== next.tag) {\r\n                if (next.tag) {\r\n                    cursor = svg\r\n                        ? document.createElementNS(\r\n                              \"http://www.w3.org/2000/svg\",\r\n                              next.tag\r\n                          )\r\n                        : document.createElement(next.tag);\r\n                    if (node) {\r\n                        replace(parent, cursor, node);\r\n                        // Avoid the merge if the node is a component\r\n                        if (!cursor[ELEMENT]) {\r\n                            while (node.firstChild) {\r\n                                append(cursor, node.firstChild);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        append(parent, cursor);\r\n                    }\r\n                } else {\r\n                    cursor = document.createTextNode(\"\");\r\n                    if (prev.tag) {\r\n                        replace(parent, cursor, node);\r\n                    } else {\r\n                        append(parent, cursor);\r\n                    }\r\n                }\r\n            }\r\n            if (cursor.nodeName === \"#text\") {\r\n                if (prev.children !== next.children)\r\n                    cursor.textContent = next.children;\r\n            } else {\r\n                diffProps(\r\n                    cursor,\r\n                    prev.props,\r\n                    next.props,\r\n                    svg,\r\n                    // of being an Atomico component, the object is created to transmit the mutations\r\n                    cursor[ELEMENT] && {\r\n                        children: next.children.map(({ children }) => children)\r\n                    }\r\n                );\r\n                if (cursor && !cursor[ELEMENT]) {\r\n                    diff(cursor, prev.children, next.children, svg);\r\n                }\r\n            }\r\n        } else {\r\n            if (node) remove(parent, node);\r\n        }\r\n    }\r\n}\r\n","import { MOUNT, UNMOUNT, RECEIVE_PROPS, ELEMENT } from \"./constants\";\r\n\r\nimport { diff } from \"./diff\";\r\nimport { concat } from \"./vdom\";\r\nimport { getProps, root } from \"./utils\";\r\n\r\nexport default class extends HTMLElement {\r\n    constructor() {\r\n        super();\r\n        this.autorun();\r\n    }\r\n    static get observedAttributes() {\r\n        return this.props || [];\r\n    }\r\n    autorun() {\r\n        this[ELEMENT] = true;\r\n        this.state = {};\r\n        this.props = { children: [] };\r\n        this._props = this.constructor.props || [];\r\n        this._render = [];\r\n\r\n        let prevent = true;\r\n\r\n        this.listeners = [MOUNT, UNMOUNT, RECEIVE_PROPS].map(type => {\r\n            let handler = event => {\r\n                if (event.type !== type) return;\r\n\r\n                if (type === MOUNT) {\r\n                    this.props = { ...getProps(this._props, this) };\r\n                    prevent = false;\r\n                }\r\n\r\n                if (prevent) return;\r\n\r\n                if (this[type]) this[type](event);\r\n\r\n                if (event.defaultPrevented) return;\r\n\r\n                if (type === RECEIVE_PROPS) {\r\n                    this.props = { ...this.props, ...event.detail };\r\n                }\r\n                this.setState({});\r\n            };\r\n            this.addEventListener(type, handler);\r\n            return () => this.removeEventListener(type, handler);\r\n        });\r\n    }\r\n    connectedCallback() {\r\n        this.dispatch(MOUNT);\r\n    }\r\n    disconnectedCallback() {\r\n        this.dispatch(UNMOUNT);\r\n        this.listeners.forEach(handler => handler());\r\n    }\r\n    attributeChangedCallback(index, prev, next) {\r\n        if (prev === next) return;\r\n        this.dispatch(RECEIVE_PROPS, getProps([index], { [index]: next }));\r\n    }\r\n    dispatch(type, detail) {\r\n        this.dispatchEvent(\r\n            new CustomEvent(type, {\r\n                cancelable: true,\r\n                detail\r\n            })\r\n        );\r\n    }\r\n    setState(next) {\r\n        if (!next) return;\r\n        this.state = { ...this.state, ...next };\r\n        let render = concat([this.render()]);\r\n        diff(root(this), this._render, render);\r\n        this._render = render;\r\n    }\r\n    render() {}\r\n}\r\n"],"names":["const","ELEMENT","MOUNT","UNMOUNT","RECEIVE_PROPS","getProps","props","element","let","data","i","length","prop","value","HTMLElement","getAttribute","replace","all","letter","toUpperCase","test","JSON","parse","root","parent","shadowRoot","remove","child","removeChild","append","appendChild","newChild","oldChild","replaceChild","h","tag","VDom","concat","children","this","isVDom","merge","Array","isArray","push","diffProps","node","prev","next","svg","keys","Object","_props","indexOf","removeEventListener","addEventListener","index","style","cssText","setAttributeNS","setAttribute","removeAttribute","dispatch","diff","master","commit","childNodes","Math","max","cursor","document","createElementNS","createElement","firstChild","createTextNode","nodeName","textContent","map","ref","[object Object]","super","autorun","observedAttributes","state","constructor","_render","prevent","listeners","type","handler","event","defaultPrevented","detail","setState","forEach","dispatchEvent","CustomEvent","cancelable","render"],"mappings":"oEAAOA,IAAMC,QAAU,UACVC,MAAQ,eACRC,QAAU,iBACVC,cAAgB,sBCHtB,SAASC,SAASC,EAAOC,GAE5B,IADAC,IAAIC,EAAO,GACFC,EAAI,EAAGA,EAAIJ,EAAMK,OAAQD,IAAK,CACnCF,IAAII,EAAON,EAAMI,GACbG,EACIN,aAAmBO,YACbP,EAAQQ,aAAaH,GACrBL,EAAQK,GAEtBH,EACIG,EAAKI,QAAQ,qBAAcC,EAAKC,UAAWA,EAAOC,iBAClD,SAASC,KAAKR,GAAQS,KAAKC,MAAMT,GAASA,EAElD,OAAOJ,EAGX,SAAgBc,KAAKC,GACjB,OAAOA,EAAOC,YAAcD,EAEhC,SAAgBE,OAAOF,EAAQG,GAC3BJ,KAAKC,GAAQI,YAAYD,GAG7B,SAAgBE,OAAOL,EAAQG,GAC3BJ,KAAKC,GAAQM,YAAYH,GAG7B,SAAgBX,QAAQQ,EAAQO,EAAUC,GACtCT,KAAKC,GAAQS,aAAaF,EAAUC,GCrBxC,SAAgBE,EAAEC,EAAK7B,iEACnB,OAAO,IAAI8B,KAAKD,EAAK7B,EAAO+B,OAAOC,IAQvC,SAAgBF,KAAKD,EAAK7B,EAAOgC,GAC7BC,KAAKJ,IAAMA,EACXI,KAAKjC,MAAQA,GAAS,GACtBiC,KAAKD,SAAWA,GAAY,GAOhC,SAAgBE,OAAO3B,GACnB,MAAwB,iBAAVA,GAAsBA,aAAiBuB,KAQzD,SAAgBC,OAAOC,EAAUG,kBAAQ,IACrC,IAAKjC,IAAIE,EAAI,EAAGA,EAAI4B,EAAS3B,OAAQD,IAAK,CACtCF,IAAImB,EAAQW,EAAS5B,GACrBgC,MAAMC,QAAQhB,GACRU,OAAOV,EAAOc,GACdA,EAAMG,KAAKJ,OAAOb,GAASA,EAAQ,IAAIS,KAAK,GAAI,GAAIT,GAAS,KAEvE,OAAOc,EC3BX,SAAgBI,UAAUC,EAAMC,EAAMC,EAAMC,EAAK3C,GAI7C,IAFAE,IAAI0C,EAAOC,OAAOD,KAAKH,GAAMV,OAAOc,OAAOD,KAAKF,IAEvCtC,EAAI,EAAGA,EAAIwC,EAAKvC,OAAQD,IAAK,CAClCF,IAAII,EAAOsC,EAAKxC,GAChB,GAAIqC,EAAKnC,KAAUoC,EAAKpC,GAAO,CAC3B,GAAIN,GAASwC,EAAKM,OAAOC,QAAQzC,IAAS,EAAG,CACzCN,EAAMM,GAAQoC,EAAKpC,GACnB,SAEJ,GAC0B,mBAAfoC,EAAKpC,IACU,mBAAfmC,EAAKnC,GAERmC,EAAKnC,IAAOkC,EAAKQ,oBAAoB1C,EAAMmC,EAAKnC,IACpDkC,EAAKS,iBAAiB3C,EAAMoC,EAAKpC,SAC9B,GAAIA,KAAQoC,EACf,GAAKpC,KAAQkC,IAASG,GAASA,GAAgB,UAATrC,EAClC,GAAa,UAATA,EACA,GAA0B,iBAAfoC,EAAKpC,GACZ,IAAKJ,IAAIgD,KAASR,EAAKpC,GACnBkC,EAAKW,MAAMD,GAASR,EAAKpC,GAAM4C,QAGnCV,EAAKW,MAAMC,QAAUV,EAAKpC,QAG9BkC,EAAKlC,GAAQoC,EAAKpC,QAGtBqC,EACMH,EAAKa,eAAe,KAAM/C,EAAMoC,EAAKpC,IACrCkC,EAAKc,aAAahD,EAAMoC,EAAKpC,SAGvCkC,EAAKe,gBAAgBjD,IAI7BN,GAAOwC,EAAKgB,SAAS1D,cAAeE,GAS5C,SAAgByD,KAAKvC,EAAQwC,EAAQC,EAAQhB,GAGzC,IAFAzC,IAAI8B,EAAWd,EAAO0C,YAAc,GAChCvD,EAASwD,KAAKC,IAAIJ,EAAOrD,OAAQsD,EAAOtD,QACnCD,EAAI,EAAGA,EAAIC,EAAQD,IAAK,CAC7BF,IAAIuC,EAAOiB,EAAOtD,IAAM,IAAI0B,KACxBY,EAAOiB,EAAOvD,GACdoC,EAAOR,EAAS5B,GAEpB,GAAIsC,EAAM,CACNxC,IAAI6D,EAASvB,EAEb,GADAG,EAAMA,GAAoB,QAAbD,EAAKb,IACdY,EAAKZ,MAAQa,EAAKb,IAClB,GAAIa,EAAKb,IAOL,GANAkC,EAASpB,EACHqB,SAASC,gBACL,6BACAvB,EAAKb,KAETmC,SAASE,cAAcxB,EAAKb,KAC9BW,GAGA,GAFA9B,QAAQQ,EAAQ6C,EAAQvB,IAEnBuB,EAAOpE,SACR,KAAO6C,EAAK2B,YACR5C,OAAOwC,EAAQvB,EAAK2B,iBAI5B5C,OAAOL,EAAQ6C,QAGnBA,EAASC,SAASI,eAAe,IAC7B3B,EAAKZ,IACLnB,QAAQQ,EAAQ6C,EAAQvB,GAExBjB,OAAOL,EAAQ6C,GAIH,UAApBA,EAAOM,SACH5B,EAAKT,WAAaU,EAAKV,WACvB+B,EAAOO,YAAc5B,EAAKV,WAE9BO,UACIwB,EACAtB,EAAKzC,MACL0C,EAAK1C,MACL2C,EAEAoB,EAAOpE,UAAY,CACfqC,SAAUU,EAAKV,SAASuC,aAAKC,yBAGjCT,IAAWA,EAAOpE,UAClB8D,KAAKM,EAAQtB,EAAKT,SAAUU,EAAKV,SAAUW,SAI/CH,GAAMpB,OAAOF,EAAQsB,ICpHtB,sBAAchC,YACzBiE,cACIC,QACAzC,KAAK0C,UAETC,gCACI,OAAO3C,KAAKjC,OAAS,GAEzByE,qBACIxC,KAAKtC,UAAW,EAChBsC,KAAK4C,MAAQ,GACb5C,KAAKjC,MAAQ,CAAEgC,SAAU,IACzBC,KAAKa,OAASb,KAAK6C,YAAY9E,OAAS,GACxCiC,KAAK8C,QAAU,GAEf7E,IAAI8E,GAAU,EAEd/C,KAAKgD,UAAY,CAACrF,MAAOC,QAASC,eAAeyE,aAAIW,GACjDhF,IAAIiF,WAAUC,GACNA,EAAMF,OAASA,IAEfA,IAAStF,QACTqC,EAAKjC,MAAQ6C,iBAAK9C,SAASkC,EAAKa,OAAQb,IACxC+C,GAAU,GAGVA,IAEA/C,EAAKiD,IAAOjD,EAAKiD,GAAME,GAEvBA,EAAMC,mBAENH,IAASpF,gBACTmC,EAAKjC,MAAQ6C,iBAAKZ,EAAKjC,MAAOoF,EAASE,SAE3CrD,EAAKsD,SAAS,QAGlB,OADAtD,EAAKgB,iBAAiBiC,EAAMC,qBACflD,EAAKe,oBAAoBkC,EAAMC,MAGpDV,oBACIxC,KAAKuB,SAAS5D,OAElB6E,uBACIxC,KAAKuB,SAAS3D,SACdoC,KAAKgD,UAAUO,iBAAQL,UAAWA,MAEtCV,yBAAyBvB,EAAOT,EAAMC,SAC9BD,IAASC,GACbT,KAAKuB,SAAS1D,cAAeC,SAAS,CAACmD,OAAQ,IAAGA,GAAQR,OAE9D+B,SAASS,EAAMI,GACXrD,KAAKwD,cACD,IAAIC,YAAYR,EAAM,CAClBS,YAAY,SACZL,KAIZb,SAAS/B,GACL,GAAKA,EAAL,CACAT,KAAK4C,MAAQhC,iBAAKZ,KAAK4C,MAAOnC,GAC9BxC,IAAI0F,EAAS7D,OAAO,CAACE,KAAK2D,WAC1BnC,KAAKxC,KAAKgB,MAAOA,KAAK8C,QAASa,GAC/B3D,KAAK8C,QAAUa,GAEnBnB"}