{"version":3,"file":"atomico.umd.js","sources":["../src/vdom.js","../src/constants.js","../src/utils.js","../src/diff.js","../src/element.js"],"sourcesContent":["/**\r\n * Create an instance of a virtual node\r\n * @param {*} tag - be social to the tagName\r\n * @param {*} props - is associated with the attributes of the tag\r\n * @param  {...*} children - the children associated with the tag\r\n * @return {VDom}\r\n */\r\nexport function h(tag, props, ...children) {\r\n    return new VDom(tag, props, concat(children));\r\n}\r\n/**\r\n * Create an instance of a virtual node\r\n * @param {*} tag - be social to the tagName\r\n * @param {*} props - is associated with the attributes of the tag\r\n * @param  {...*} children - the children associated with the tag\r\n */\r\nexport function VDom(tag, props, children) {\r\n    this.tag = tag;\r\n    this.props = props || {};\r\n    this.children = children || [];\r\n}\r\n\r\nexport function isDom(tag) {\r\n    return tag !== null && typeof tag === \"object\" && tag.nodeType !== 11\r\n        ? true\r\n        : false;\r\n}\r\n/**\r\n *\r\n * @param {*} value\r\n * @return {Boolean}\r\n */\r\nexport function isVDom(value) {\r\n    return typeof value === \"object\" && value instanceof VDom;\r\n}\r\n/**\r\n * prepares the children associated with virtual dom, managing to simplify the algorithm of diff\r\n * @param {*} children - list of children associated with the virtual dom\r\n * @param {*} merge - array that concatenates all the children independent of the depth of the array\r\n * @return {Array}\r\n */\r\nexport function concat(children, merge = []) {\r\n    for (let i = 0; i < children.length; i++) {\r\n        let child = children[i];\r\n        Array.isArray(child)\r\n            ? concat(child, merge)\r\n            : merge.push(\r\n                  isVDom(child)\r\n                      ? child\r\n                      : isDom(child)\r\n                          ? new VDom(child, {}, [\"\"])\r\n                          : new VDom(\"\", {}, [child || \"\"])\r\n              );\r\n    }\r\n    return merge;\r\n}\r\n","export const ELEMENT = \"__atomico_el__\";\r\nexport const MASTER = \"__atomico_prev__\";\r\n","export function camelCase(string) {\r\n    return string.replace(/-+([\\w])/g, (all, letter) => letter.toUpperCase());\r\n}\r\n\r\nexport function defer(handler) {\r\n    return Promise.resolve().then(handler);\r\n}\r\n\r\nexport function root(parent) {\r\n    return parent.shadowRoot || parent;\r\n}\r\nexport function remove(parent, child) {\r\n    root(parent).removeChild(child);\r\n}\r\n\r\nexport function append(parent, child) {\r\n    root(parent).appendChild(child);\r\n}\r\n\r\nexport function replace(parent, newChild, oldChild) {\r\n    root(parent).replaceChild(newChild, oldChild);\r\n}\r\n\r\nexport function getProps(props) {\r\n    let isArray = Array.isArray(props);\r\n    return {\r\n        keys: (isArray ? props : Object.keys(props)).concat(\"children\"),\r\n        types: isArray ? {} : props\r\n    };\r\n}\r\n","import { ELEMENT, MASTER } from \"./constants\";\r\n\r\nimport { remove, append, replace, root } from \"./utils\";\r\nimport { VDom, h, isDom } from \"./vdom\";\r\n/**\r\n * compares the attributes associated with the 2 render states\r\n * @param {HTMLELement} node\r\n * @param {Object} prev - properties that the node already has\r\n * @param {Object} next - object with the new properties to define the node\r\n * @param {Boolean} [svg] - define if the html element is a svg\r\n * @param {Object} [collect] -It allows to recover properties, avoiding in turn the analysis\r\n *                            of these on the node, these are returned in an object in association\r\n *                            with the key of the loop\r\n * @param {Boolean} [nextMerge] - it allows not to eliminate the properties of the previous state and add them to the next state\r\n * @return {Object} Collected properties\r\n */\r\nexport function diffProps(node, prev, next, svg, collect, nextMerge) {\r\n    // generates a list of the existing attributes in both versions\r\n    let keys = Object.keys(prev).concat(Object.keys(next)),\r\n        length = keys.length,\r\n        props = {};\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        let prop = keys[i];\r\n        if (prev[prop] !== next[prop]) {\r\n            /**\r\n             * Since prop is defined, Atomico will proceed only to take the attributes\r\n             * defined for the component, the undefined ones continue the normal process\r\n             */\r\n            if (collect && collect.indexOf(prop) > -1) {\r\n                props[prop] = next[prop];\r\n                continue;\r\n            }\r\n            if (\r\n                typeof next[prop] === \"function\" ||\r\n                typeof prev[prop] === \"function\"\r\n            ) {\r\n                if (prev[prop]) node.removeEventListener(prop, prev[prop]);\r\n                node.addEventListener(prop, next[prop]);\r\n            } else if (prop in next) {\r\n                if ((prop in node && !svg) || (svg && prop === \"style\")) {\r\n                    if (prop === \"style\") {\r\n                        if (typeof next[prop] === \"object\") {\r\n                            let prevStyle = prev[prop] || {},\r\n                                nextStyle = next[prop];\r\n                            for (let index in nextStyle) {\r\n                                if (prevStyle[index] !== nextStyle[index]) {\r\n                                    node.style[index] = nextStyle[index];\r\n                                }\r\n                            }\r\n                            next[prop] = { ...prevStyle, ...nextStyle };\r\n                        } else {\r\n                            node.style.cssText = next[prop];\r\n                        }\r\n                    } else {\r\n                        node[prop] = next[prop];\r\n                    }\r\n                } else {\r\n                    if (svg && prop === \"xmlns\") continue;\r\n                    svg\r\n                        ? node.setAttributeNS(null, prop, next[prop])\r\n                        : node.setAttribute(prop, next[prop]);\r\n                }\r\n            } else {\r\n                if (nextMerge) {\r\n                    next[prop] = prev[prop];\r\n                } else {\r\n                    node.removeAttribute(prop);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return props;\r\n}\r\n/**\r\n *\r\n * @param {VDom} vdom - It allows to identify if this node requires the use of a slot\r\n * @param {Object} slots - Object that has living nodes associated by an index\r\n */\r\nfunction slot(vdom, slots) {\r\n    if (vdom.tag === \"slot\") {\r\n        return new VDom(\r\n            slots[vdom.props.name] || \"\",\r\n            vdom.props,\r\n            vdom.children\r\n        );\r\n    }\r\n    return vdom;\r\n}\r\n/**\r\n * Analyze if prev Node has or does not have a state defined by the diff process,\r\n * this is left linked to the node to avoid its loss either by external editing.\r\n *\r\n * @param {HTMLELement} [parent] - If the father is defined, the remove function is activated,\r\n *                                 it allows to remove the nodes from the father\r\n * @param {HTMLELement} [prevNode] - Node that can possess the previous state\r\n * @param {Object} next - Next render state\r\n * @param {Object} slots - Group the slots to be retrieved by the special slot tag\r\n * @param {Boolean} svg - define if the html element is a svg\r\n * @return {HTMLELement} - returns the current node.\r\n */\r\nexport function diff(parent, prevNode, next, slots = {}, svg) {\r\n    let prev = prevNode && prevNode[MASTER] ? prevNode[MASTER] : new VDom(),\r\n        nextNode = prevNode,\r\n        nextMaster = next;\r\n    if (next) {\r\n        next = slot(next, slots);\r\n        prev = slot(prev, slots);\r\n        svg = svg || next.tag === \"svg\";\r\n\r\n        if (parent) {\r\n            if (prev.tag !== next.tag) {\r\n                nextNode = isDom(next.tag)\r\n                    ? next.tag\r\n                    : next.tag\r\n                        ? svg\r\n                            ? document.createElementNS(\r\n                                  \"http://www.w3.org/2000/svg\",\r\n                                  next.tag\r\n                              )\r\n                            : document.createElement(next.tag)\r\n                        : document.createTextNode(\"\");\r\n                if (prevNode) {\r\n                    replace(parent, nextNode, prevNode);\r\n                    while (!nextNode[ELEMENT] && prevNode.firstChild) {\r\n                        append(nextNode, prevNode.firstChild);\r\n                    }\r\n                } else {\r\n                    append(parent, nextNode);\r\n                }\r\n            }\r\n        }\r\n        if (nextNode.nodeType === 3) {\r\n            if (prev.children[0] !== next.children[0])\r\n                nextNode.textContent = next.children[0];\r\n        } else {\r\n            let collect = parent && nextNode[ELEMENT] && nextNode._props.keys,\r\n                props = diffProps(\r\n                    nextNode,\r\n                    prev.props,\r\n                    next.props,\r\n                    svg,\r\n                    /**\r\n                     * It allows to obtain properties of the iteration of diff by properties\r\n                     */\r\n                    collect,\r\n                    /**\r\n                     * This allows not to delete the previous state and keep it in the next state\r\n                     */\r\n                    collect\r\n                );\r\n            if (nextNode[ELEMENT] && parent) {\r\n                props.children = next.children.map(\r\n                    vdom => (vdom.tag ? vdom : vdom.children)\r\n                );\r\n                nextNode.setProperties(props);\r\n            } else {\r\n                if (nextNode) {\r\n                    let children = Array.from(nextNode.childNodes),\r\n                        length = Math.max(\r\n                            children.length,\r\n                            next.children.length\r\n                        );\r\n                    for (let i = 0; i < length; i++) {\r\n                        diff(\r\n                            nextNode,\r\n                            children[i],\r\n                            next.children[i],\r\n                            slots,\r\n                            svg\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        if (parent && prevNode) remove(parent, prevNode);\r\n    }\r\n    nextNode[MASTER] = nextMaster;\r\n    return parent;\r\n}\r\n","import { ELEMENT, MASTER } from \"./constants\";\r\nimport { h, isVDom } from \"./vdom\";\r\nimport { diff } from \"./diff\";\r\nimport { defer, camelCase, append, getProps } from \"./utils\";\r\n\r\nexport default class extends HTMLElement {\r\n    constructor() {\r\n        super();\r\n\r\n        this[ELEMENT] = true;\r\n\r\n        this.slots = {};\r\n        this.props = { children: [] };\r\n        this.isMount = false;\r\n        this.preventRender = true;\r\n        this.content = document.createDocumentFragment();\r\n\r\n        this._class = this.constructor;\r\n        this._name = this.tagName.toLocaleLowerCase();\r\n        this._props = getProps(this._class.props);\r\n    }\r\n    static get props() {\r\n        return {};\r\n    }\r\n    static get observedAttributes() {\r\n        return getProps(this.props).keys;\r\n    }\r\n    connectedCallback() {\r\n        defer(() => {\r\n            while (this.firstChild) {\r\n                let child = this.firstChild,\r\n                    slot = child.getAttribute && child.getAttribute(\"slot\");\r\n                if (slot) {\r\n                    this.slots[slot] = child;\r\n                }\r\n                append(this.content, child);\r\n            }\r\n            this.preventRender = false;\r\n            this.setState({}, () => {\r\n                this.isMount = true;\r\n                this.elementMount();\r\n            });\r\n        });\r\n    }\r\n    setAttribute(prop, value) {\r\n        if (this._props.keys.indexOf(prop) > -1) {\r\n            this.setProperties({ [prop]: value });\r\n        } else {\r\n            super.setAttribute(prop, value);\r\n        }\r\n    }\r\n    setProperties(props) {\r\n        let nextProps = {},\r\n            prevent = this.isMount;\r\n        for (let prop in props) {\r\n            let type = this._props.types[prop],\r\n                value = props[prop],\r\n                index;\r\n            if (type) {\r\n                value = type(value);\r\n            }\r\n            index = camelCase(prop);\r\n            if (value !== this.props[index]) {\r\n                nextProps[index] = value;\r\n            }\r\n        }\r\n        if (Object.keys(nextProps).length) {\r\n            if (prevent)\r\n                prevent = this.elementReceiveProps(nextProps) !== false;\r\n            this.props = { ...this.props, ...nextProps };\r\n            if (prevent) this.setState({});\r\n        }\r\n    }\r\n    attributeChangedCallback(index, prev, next) {\r\n        this.setProperties({ [index]: next });\r\n    }\r\n    disconnectedCallback() {\r\n        this.elementMount();\r\n    }\r\n    setState(state, watch) {\r\n        if (typeof state !== \"object\") return;\r\n        this.state = { ...this.state, ...state };\r\n        if (this.preventRender) return;\r\n        this.preventRender = true;\r\n        defer(() => {\r\n            let render = this.render();\r\n\r\n            if (isVDom(render)) {\r\n                let isHost = render.tag === \"host\";\r\n                render = h(\r\n                    this._name,\r\n                    isHost ? render.props : {},\r\n                    isHost ? render.children : render\r\n                );\r\n            } else {\r\n                render = h(this._name, {}, render);\r\n            }\r\n\r\n            diff(false, this, render, this.slots);\r\n            this.preventRender = false;\r\n            watch ? watch() : this.elementUpdate();\r\n        });\r\n    }\r\n    elementMount() {}\r\n    elementUnmount() {}\r\n    elementUpdate() {}\r\n    elementReceiveProps() {}\r\n    render() {}\r\n}\r\n"],"names":["h","tag","props","VDom","concat","children","merge","let","i","length","child","Array","isArray","push","isVDom","isDom","this","nodeType","value","const","ELEMENT","MASTER","defer","handler","Promise","resolve","then","root","parent","shadowRoot","append","appendChild","getProps","keys","Object","types","slot","vdom","slots","name","diff","prevNode","next","svg","prev","nextNode","nextMaster","document","createElementNS","createElement","createTextNode","newChild","oldChild","replaceChild","replace","firstChild","textContent","collect","_props","node","nextMerge","prop","indexOf","removeEventListener","addEventListener","prevStyle","nextStyle","index","style","cssText","setAttributeNS","setAttribute","removeAttribute","diffProps","map","setProperties","from","childNodes","Math","max","removeChild","remove","HTMLElement","[object Object]","super","isMount","preventRender","content","createDocumentFragment","_class","constructor","_name","tagName","toLocaleLowerCase","observedAttributes","getAttribute","setState","elementMount","nextProps","prevent","type","all","letter","toUpperCase","elementReceiveProps","state","watch","render","isHost","elementUpdate"],"mappings":"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"}