{"version":3,"file":"atomico.umd.js","sources":["../src/vdom/dom.js","../src/vdom/vdom.js","../src/vdom/diff.js","../src/utils.js","../src/component.js"],"sourcesContent":["export function root(parent) {\r\n    return parent.shadowRoot || parent;\r\n}\r\nexport function remove(parent, child) {\r\n    root(parent).removeChild(child);\r\n}\r\n\r\nexport function append(parent, child) {\r\n    root(parent).appendChild(child);\r\n}\r\n\r\nexport function replace(parent, newChild, oldChild) {\r\n    root(parent).replaceChild(newChild, oldChild);\r\n}\r\n","/**\r\n * Create an instance of a virtual node\r\n * @param {*} tag - be social to the tagName\r\n * @param {*} props - is associated with the attributes of the tag\r\n * @param  {...*} children - the children associated with the tag\r\n * @return {VDom}\r\n */\r\nexport function h(tag, props, ...children) {\r\n    return new VDom(tag, props, concat(children));\r\n}\r\n/**\r\n * Create an instance of a virtual node\r\n * @param {*} tag - be social to the tagName\r\n * @param {*} props - is associated with the attributes of the tag\r\n * @param  {...*} children - the children associated with the tag\r\n */\r\nexport function VDom(tag, props, children) {\r\n    this.tag = tag;\r\n    this.props = props || {};\r\n    this.children = children || [];\r\n}\r\n/**\r\n *\r\n * @param {*} value\r\n * @return {Boolean}\r\n */\r\nexport function isVDom(value) {\r\n    return typeof value === \"object\" && value instanceof VDom;\r\n}\r\n/**\r\n * prepares the children associated with virtual dom, managing to simplify the algorithm of diff\r\n * @param {*} children - list of children associated with the virtual dom\r\n * @param {*} merge - array that concatenates all the children independent of the depth of the array\r\n * @return {Array}\r\n */\r\nexport function concat(children, merge = []) {\r\n    for (let i = 0; i < children.length; i++) {\r\n        let child = children[i];\r\n        Array.isArray(child)\r\n            ? concat(child, merge)\r\n            : merge.push(isVDom(child) ? child : new VDom(\"\", {}, child || \"\"));\r\n    }\r\n    return merge;\r\n}\r\n","import { remove, append, replace, root } from \"./dom\";\r\nimport { VDom, h } from \"./vdom\";\r\n/**\r\n * compares the attributes associated with the 2 render states\r\n * @param {HTMLELement} node\r\n * @param {Object} prev\r\n * @param {Object} next\r\n * @param {Boolean} svg\r\n */\r\nexport function diffProps(node, prev, next, svg) {\r\n    // generates a list of the existing attributes in both versions\r\n    let keys = Object.keys(prev).concat(Object.keys(next));\r\n    for (let i = 0; i < keys.length; i++) {\r\n        let prop = keys[i];\r\n        if (prev[prop] !== next[prop]) {\r\n            if (\r\n                typeof next[prop] === \"function\" ||\r\n                typeof prev[prop] === \"function\"\r\n            ) {\r\n                node[prop.toLowerCase()] = next[prop] || null;\r\n            } else if (prop in next) {\r\n                if ((prop in node && !svg) || (svg && prop === \"style\")) {\r\n                    if (prop === \"style\") {\r\n                        if (typeof next[prop] === \"object\") {\r\n                            for (let index in next[prop]) {\r\n                                node.style[index] = next[prop][index];\r\n                            }\r\n                        } else {\r\n                            node.style.cssText = next[prop];\r\n                        }\r\n                    } else {\r\n                        node[prop] = next[prop];\r\n                    }\r\n                } else {\r\n                    svg\r\n                        ? node.setAttributeNS(null, prop, next[prop])\r\n                        : node.setAttribute(prop, next[prop]);\r\n                }\r\n            } else {\r\n                node.removeAttribute(prop);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * It allows to compare the 2 states of the render\r\n * @param {HTMLELement} parent - will receive the changes that the diff process determines\r\n * @param {Array} master - Previous state of the render\r\n * @param {Array} commit - Next render state\r\n * @param {Boolean} svg\r\n */\r\nexport function diff(parent, master, commit, svg) {\r\n    let children = parent.childNodes || [],\r\n        length = Math.max(master.length, commit.length);\r\n    for (let i = 0; i < length; i++) {\r\n        let prev = master[i] || new VDom(),\r\n            next = commit[i],\r\n            node = children[i];\r\n\r\n        if (next) {\r\n            let cursor = node;\r\n            svg = svg || next.tag === \"svg\";\r\n            if (prev.tag !== next.tag) {\r\n                if (next.tag) {\r\n                    cursor = svg\r\n                        ? document.createElementNS(\r\n                              \"http://www.w3.org/2000/svg\",\r\n                              next.tag\r\n                          )\r\n                        : document.createElement(next.tag);\r\n                    if (node) {\r\n                        replace(parent, cursor, node);\r\n                        // Avoid the merge if the node is a component\r\n                        if (!cursor.dispatch) {\r\n                            while (node.firstChild) {\r\n                                append(cursor, node.firstChild);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        append(parent, cursor);\r\n                    }\r\n                } else {\r\n                    cursor = document.createTextNode(\"\");\r\n                    if (prev.tag) {\r\n                        replace(parent, cursor, node);\r\n                    } else {\r\n                        append(parent, cursor);\r\n                    }\r\n                }\r\n            }\r\n            if (cursor.nodeName === \"#text\") {\r\n                if (prev.children !== next.children)\r\n                    cursor.textContent = next.children;\r\n            } else {\r\n                // transmits the children to the component\r\n                if (cursor.dispatch) {\r\n                    cursor.dispatch(\"receiveChildren\", next.children);\r\n                }\r\n                diffProps(cursor, prev.props, next.props, svg);\r\n                if (cursor && !cursor.render) {\r\n                    diff(cursor, prev.children, next.children, svg);\r\n                }\r\n            }\r\n        } else {\r\n            if (node) remove(parent, node);\r\n        }\r\n    }\r\n}\r\n","export function getMethods(proto) {\r\n    let keys = [];\r\n    do {\r\n        keys = keys.concat(Object.getOwnPropertyNames(proto));\r\n    } while ((proto = Object.getPrototypeOf(proto)));\r\n    return keys;\r\n}\r\n\r\nexport function getEvents(Root) {\r\n    let regExp = /^on([A-Z])/,\r\n        methods = getMethods(Root.prototype),\r\n        events = [];\r\n    for (let i = 0; i < methods.length; i++) {\r\n        let method = methods[i];\r\n        if (methods.indexOf(method) === i && regExp.test(method)) {\r\n            events.push({\r\n                method,\r\n                type: method.replace(regExp, (all, letter) =>\r\n                    letter.toLowerCase()\r\n                )\r\n            });\r\n        }\r\n    }\r\n    return events;\r\n}\r\n\r\nexport function getProps(props, element) {\r\n    let data = {};\r\n    for (let i = 0; i < props.length; i++) {\r\n        let prop = props[i],\r\n            value =\r\n                element instanceof HTMLElement\r\n                    ? element.getAttribute(prop)\r\n                    : element[prop];\r\n\r\n        data[\r\n            prop.replace(/-+([\\w])/g, (all, letter) => letter.toUpperCase())\r\n        ] = /^json-/.test(prop) ? JSON.parse(value) : value;\r\n    }\r\n    return data;\r\n}\r\n","import { root } from \"./vdom/dom\";\r\nimport { diff } from \"./vdom/diff\";\r\nimport { concat } from \"./vdom/vdom\";\r\nimport { getProps } from \"./utils\";\r\nexport default class extends HTMLElement {\r\n    constructor() {\r\n        super();\r\n        this.autorun();\r\n    }\r\n    static get observedAttributes() {\r\n        return this.props || [];\r\n    }\r\n    autorun() {\r\n        this.state = {};\r\n        this.props = { children: [] };\r\n        this._props = this.constructor.props || [];\r\n        this._render = [];\r\n\r\n        let block = true;\r\n        [\"create\", \"mount\", \"unmount\", \"receiveProp\", \"receiveChildren\"].map(\r\n            type => {\r\n                let method = type.replace(\r\n                    /\\w/,\r\n                    letter => \"on\" + letter.toUpperCase()\r\n                );\r\n                this.addEventListener(type, event => {\r\n                    if (event.type !== type) return;\r\n\r\n                    if (type === \"mount\") {\r\n                        this.props = getProps(this._props, this);\r\n                        block = false;\r\n                    }\r\n                    if (block) return;\r\n                    if (this[method]) this[method](event);\r\n\r\n                    if (event.defaultPrevented) return;\r\n                    if (type === \"receiveProp\") {\r\n                        this.props = { ...this.props, ...event.detail };\r\n                    }\r\n                    if (type === \"receiveChildren\") {\r\n                        this.props.children = event.detail;\r\n                    }\r\n                    this.setState({});\r\n                });\r\n            }\r\n        );\r\n    }\r\n    connectedCallback() {\r\n        this.dispatch(\"mount\");\r\n    }\r\n    disconnectedCallback() {\r\n        this.dispatch(\"unmount\");\r\n    }\r\n    attributeChangedCallback(index, prev, next) {\r\n        if (prev === next) return;\r\n        this.dispatch(\"receiveProp\", getProps([index], { [index]: next }));\r\n    }\r\n    dispatch(type, detail) {\r\n        this.dispatchEvent(\r\n            new CustomEvent(type, {\r\n                cancelable: true,\r\n                detail\r\n            })\r\n        );\r\n    }\r\n    setState(next) {\r\n        if (!next) return;\r\n        this.state = { ...this.state, ...next };\r\n        let render = concat([this.render()]);\r\n        diff(root(this), this._render, render);\r\n        this._render = render;\r\n    }\r\n    render() {}\r\n}\r\n"],"names":["root","parent","shadowRoot","remove","child","removeChild","append","appendChild","replace","newChild","oldChild","replaceChild","VDom","tag","props","children","this","concat","merge","let","i","length","Array","isArray","push","value","diffProps","node","prev","next","svg","keys","Object","prop","toLowerCase","index","style","cssText","setAttributeNS","setAttribute","removeAttribute","getProps","element","data","HTMLElement","getAttribute","all","letter","toUpperCase","test","JSON","parse","[object Object]","super","autorun","observedAttributes","state","_props","constructor","_render","block","map","type","method","addEventListener","event","defaultPrevented","detail","setState","dispatch","dispatchEvent","CustomEvent","cancelable","render","diff","master","commit","childNodes","Math","max","cursor","document","createElementNS","createElement","firstChild","createTextNode","nodeName","textContent"],"mappings":"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"}