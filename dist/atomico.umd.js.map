{"version":3,"file":"atomico.umd.js","sources":["../src/constants.js","../src/utils.js","../src/vdom.js","../src/diff.js","../src/element.js"],"sourcesContent":["export const ELEMENT = \"Atomico\";\r\n\r\nexport const MOUNT = \"elementMount\";\r\n\r\nexport const UNMOUNT = \"elementUnmount\";\r\n\r\nexport const RECEIVE_PROPS = \"elementReceiveProps\";\r\n","export function getProps(props, element) {\r\n    let data = {};\r\n    for (let i = 0; i < props.length; i++) {\r\n        let prop = props[i],\r\n            value =\r\n                element instanceof HTMLElement\r\n                    ? element.getAttribute(prop)\r\n                    : element[prop];\r\n\r\n        data[\r\n            prop.replace(/-+([\\w])/g, (all, letter) => letter.toUpperCase())\r\n        ] = value;\r\n    }\r\n    return data;\r\n}\r\n\r\nexport function root(parent) {\r\n    return parent.shadowRoot || parent;\r\n}\r\nexport function remove(parent, child) {\r\n    root(parent).removeChild(child);\r\n}\r\n\r\nexport function append(parent, child) {\r\n    root(parent).appendChild(child);\r\n}\r\n\r\nexport function replace(parent, newChild, oldChild) {\r\n    root(parent).replaceChild(newChild, oldChild);\r\n}\r\n","/**\r\n * Create an instance of a virtual node\r\n * @param {*} tag - be social to the tagName\r\n * @param {*} props - is associated with the attributes of the tag\r\n * @param  {...*} children - the children associated with the tag\r\n * @return {VDom}\r\n */\r\nexport function h(tag, props, ...children) {\r\n    return new VDom(tag, props, concat(children));\r\n}\r\n/**\r\n * Create an instance of a virtual node\r\n * @param {*} tag - be social to the tagName\r\n * @param {*} props - is associated with the attributes of the tag\r\n * @param  {...*} children - the children associated with the tag\r\n */\r\nexport function VDom(tag, props, children) {\r\n    this.tag = tag;\r\n    this.props = props || {};\r\n    this.children = children || [];\r\n}\r\n/**\r\n *\r\n * @param {*} value\r\n * @return {Boolean}\r\n */\r\nexport function isVDom(value) {\r\n    return typeof value === \"object\" && value instanceof VDom;\r\n}\r\n/**\r\n * prepares the children associated with virtual dom, managing to simplify the algorithm of diff\r\n * @param {*} children - list of children associated with the virtual dom\r\n * @param {*} merge - array that concatenates all the children independent of the depth of the array\r\n * @return {Array}\r\n */\r\nexport function concat(children, merge = []) {\r\n    for (let i = 0; i < children.length; i++) {\r\n        let child = children[i];\r\n        Array.isArray(child)\r\n            ? concat(child, merge)\r\n            : merge.push(isVDom(child) ? child : new VDom(\"\", {}, child || \"\"));\r\n    }\r\n    return merge;\r\n}\r\n","import { RECEIVE_PROPS, ELEMENT } from \"./constants\";\r\n\r\nimport { remove, append, replace, root } from \"./utils\";\r\nimport { VDom, h } from \"./vdom\";\r\n/**\r\n * compares the attributes associated with the 2 render states\r\n * @param {HTMLELement} node\r\n * @param {Object} prev - properties that the node already has\r\n * @param {Object} next - object with the new properties to define the node\r\n * @param {Boolean} [svg] - define if the html element is a svg\r\n * @param {Object} [props] - allows to define if the instance belongs to a component, if so it\r\n *                         will rescue the properties associated to the method `static get props`\r\n *                         through this variable, manages to transfer mutations and new children\r\n *                         associated with it to the component.\r\n */\r\nexport function diffProps(node, prev, next, svg, props) {\r\n    // generates a list of the existing attributes in both versions\r\n    let keys = Object.keys(prev).concat(Object.keys(next));\r\n\r\n    for (let i = 0; i < keys.length; i++) {\r\n        let prop = keys[i];\r\n        props = props === \"class\" ? \"className\" : props;\r\n        if (prev[prop] !== next[prop]) {\r\n            if (props && node._props.indexOf(prop) > -1) {\r\n                props[prop] = next[prop];\r\n                continue;\r\n            }\r\n            if (\r\n                typeof next[prop] === \"function\" ||\r\n                typeof prev[prop] === \"function\"\r\n            ) {\r\n                if (prev[prop]) node.removeEventListener(prop, prev[prop]);\r\n                node.addEventListener(prop, next[prop]);\r\n            } else if (prop in next) {\r\n                if ((prop in node && !svg) || (svg && prop === \"style\")) {\r\n                    if (prop === \"style\") {\r\n                        if (typeof next[prop] === \"object\") {\r\n                            for (let index in next[prop]) {\r\n                                node.style[index] = next[prop][index];\r\n                            }\r\n                        } else {\r\n                            node.style.cssText = next[prop];\r\n                        }\r\n                    } else {\r\n                        node[prop] = next[prop];\r\n                    }\r\n                } else {\r\n                    if (svg && prop === \"xmlns\") continue;\r\n                    svg\r\n                        ? node.setAttributeNS(null, prop, next[prop])\r\n                        : node.setAttribute(prop, next[prop]);\r\n                }\r\n            } else {\r\n                node.removeAttribute(prop);\r\n            }\r\n        }\r\n    }\r\n    if (props) node.dispatch(RECEIVE_PROPS, props);\r\n}\r\n/**\r\n * It allows to compare the 2 states of the render\r\n * @param {HTMLELement} parent - will receive the changes that the diff process determines\r\n * @param {Array} master - Previous state of the render\r\n * @param {Array} commit - Next render state\r\n * @param {Boolean} svg - define if the html element is a svg\r\n */\r\nexport function diff(parent, master, commit, svg) {\r\n    let children = parent.childNodes || [],\r\n        length = Math.max(master.length, commit.length);\r\n    for (let i = 0; i < length; i++) {\r\n        let prev = master[i] || new VDom(),\r\n            next = commit[i],\r\n            node = children[i];\r\n\r\n        if (next) {\r\n            let cursor = node;\r\n            svg = svg || next.tag === \"svg\";\r\n            if (prev.tag !== next.tag) {\r\n                if (next.tag) {\r\n                    cursor = svg\r\n                        ? document.createElementNS(\r\n                              \"http://www.w3.org/2000/svg\",\r\n                              next.tag\r\n                          )\r\n                        : document.createElement(next.tag);\r\n                    if (node) {\r\n                        replace(parent, cursor, node);\r\n                        // Avoid the merge if the node is a component\r\n                        if (!cursor[ELEMENT]) {\r\n                            while (node.firstChild) {\r\n                                append(cursor, node.firstChild);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        append(parent, cursor);\r\n                    }\r\n                } else {\r\n                    cursor = document.createTextNode(\"\");\r\n                    if (prev.tag) {\r\n                        replace(parent, cursor, node);\r\n                    } else {\r\n                        append(parent, cursor);\r\n                    }\r\n                }\r\n            }\r\n            if (cursor.nodeName === \"#text\") {\r\n                if (prev.children !== next.children)\r\n                    cursor.textContent = next.children;\r\n            } else {\r\n                diffProps(\r\n                    cursor,\r\n                    prev.props,\r\n                    next.props,\r\n                    svg,\r\n                    // of being an Atomico component, the object is created to transmit the mutations\r\n                    cursor[ELEMENT] && {\r\n                        children: next.children.map(({ children }) => children)\r\n                    }\r\n                );\r\n                if (cursor && !cursor[ELEMENT]) {\r\n                    diff(cursor, prev.children, next.children, svg);\r\n                }\r\n            }\r\n        } else {\r\n            if (node) remove(parent, node);\r\n        }\r\n    }\r\n}\r\n","import { MOUNT, UNMOUNT, RECEIVE_PROPS, ELEMENT } from \"./constants\";\r\n\r\nimport { diff } from \"./diff\";\r\nimport { concat } from \"./vdom\";\r\nimport { getProps, root } from \"./utils\";\r\n\r\nexport default class extends HTMLElement {\r\n    constructor() {\r\n        super();\r\n\r\n        this[ELEMENT] = true;\r\n        this.state = {};\r\n        this._props = this.constructor.props || [];\r\n        this.props = getProps(this._props, this);\r\n        this.props.children = [];\r\n        this._render = [];\r\n\r\n        this.load();\r\n    }\r\n\r\n    static get observedAttributes() {\r\n        return this.props || [];\r\n    }\r\n    load() {\r\n        let prevent = true;\r\n        this.listeners = [MOUNT, UNMOUNT, RECEIVE_PROPS].map(type => {\r\n            let handler = event => {\r\n                if (event.type !== type) return;\r\n\r\n                if (type === MOUNT) {\r\n                    prevent = false;\r\n                }\r\n\r\n                if (prevent) return;\r\n\r\n                if (this[type]) this[type](event);\r\n\r\n                if (event.defaultPrevented) return;\r\n\r\n                if (type === RECEIVE_PROPS) {\r\n                    this.props = { ...this.props, ...event.detail };\r\n                }\r\n                this.setState({});\r\n            };\r\n            this.addEventListener(type, handler);\r\n            return () => this.removeEventListener(type, handler);\r\n        });\r\n    }\r\n    connectedCallback() {\r\n        this.dispatch(MOUNT);\r\n    }\r\n    disconnectedCallback() {\r\n        this.dispatch(UNMOUNT);\r\n        this.listeners.forEach(handler => handler());\r\n    }\r\n    attributeChangedCallback(index, prev, next) {\r\n        if (prev === next) return;\r\n        this.dispatch(RECEIVE_PROPS, getProps([index], { [index]: next }));\r\n    }\r\n    dispatch(type, detail) {\r\n        this.dispatchEvent(\r\n            new CustomEvent(type, {\r\n                cancelable: true,\r\n                detail\r\n            })\r\n        );\r\n    }\r\n    setState(next) {\r\n        if (!next) return;\r\n        this.state = { ...this.state, ...next };\r\n        let render = concat([this.render()]);\r\n        diff(root(this), this._render, render);\r\n        this._render = render;\r\n    }\r\n    render() {}\r\n}\r\n"],"names":["const","ELEMENT","MOUNT","UNMOUNT","RECEIVE_PROPS","getProps","props","element","let","data","i","length","prop","value","HTMLElement","getAttribute","replace","all","letter","toUpperCase","root","parent","shadowRoot","remove","child","removeChild","append","appendChild","newChild","oldChild","replaceChild","VDom","tag","children","this","concat","merge","Array","isArray","push","diffProps","node","prev","next","svg","keys","Object","_props","indexOf","removeEventListener","addEventListener","index","style","cssText","setAttributeNS","setAttribute","removeAttribute","dispatch","[object Object]","super","state","constructor","_render","load","observedAttributes","prevent","listeners","map","type","handler","event","defaultPrevented","detail","setState","forEach","dispatchEvent","CustomEvent","cancelable","render","diff","master","commit","childNodes","Math","max","cursor","document","createElementNS","createElement","firstChild","createTextNode","nodeName","textContent","ref"],"mappings":"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"}