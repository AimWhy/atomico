{"version":3,"file":"atomico.m.js","sources":["../src/constants.js","../src/utils.js","../src/vdom.js","../src/diff.js","../src/element.js"],"sourcesContent":["export const ELEMENT = \"Atomico\";\r\n\r\nexport const MOUNT = \"elementMount\";\r\n\r\nexport const UNMOUNT = \"elementUnmount\";\r\n\r\nexport const RECEIVE_PROPS = \"elementReceiveProps\";\r\n","export function getProps(props, element, data = {}) {\r\n    let dom = element instanceof HTMLElement;\r\n    for (let i = 0; i < props.length; i++) {\r\n        let prop = props[i],\r\n            value = dom ? element.getAttribute(prop) : element[prop];\r\n        if (dom && value === \"\") value = true;\r\n        data[prop.replace(/-+([\\w])/g, (all, letter) => letter.toUpperCase())] =\r\n            value === null ? undefined : value;\r\n    }\r\n    return data;\r\n}\r\n\r\nexport function root(parent) {\r\n    return parent.shadowRoot || parent;\r\n}\r\nexport function remove(parent, child) {\r\n    root(parent).removeChild(child);\r\n}\r\n\r\nexport function append(parent, child) {\r\n    root(parent).appendChild(child);\r\n}\r\n\r\nexport function replace(parent, newChild, oldChild) {\r\n    root(parent).replaceChild(newChild, oldChild);\r\n}\r\n","/**\r\n * Create an instance of a virtual node\r\n * @param {*} tag - be social to the tagName\r\n * @param {*} props - is associated with the attributes of the tag\r\n * @param  {...*} children - the children associated with the tag\r\n * @return {VDom}\r\n */\r\nexport function h(tag, props, ...children) {\r\n    return new VDom(tag, props, concat(children));\r\n}\r\n/**\r\n * Create an instance of a virtual node\r\n * @param {*} tag - be social to the tagName\r\n * @param {*} props - is associated with the attributes of the tag\r\n * @param  {...*} children - the children associated with the tag\r\n */\r\nexport function VDom(tag, props, children) {\r\n    this.tag = tag;\r\n    this.props = props || {};\r\n    this.children = children || [];\r\n}\r\n\r\nexport function isDom(tag) {\r\n    return tag !== null && typeof tag === \"object\" && tag.nodeType !== 11\r\n        ? true\r\n        : false;\r\n}\r\n/**\r\n *\r\n * @param {*} value\r\n * @return {Boolean}\r\n */\r\nexport function isVDom(value) {\r\n    return typeof value === \"object\" && value instanceof VDom;\r\n}\r\n/**\r\n * prepares the children associated with virtual dom, managing to simplify the algorithm of diff\r\n * @param {*} children - list of children associated with the virtual dom\r\n * @param {*} merge - array that concatenates all the children independent of the depth of the array\r\n * @return {Array}\r\n */\r\nexport function concat(children, merge = []) {\r\n    for (let i = 0; i < children.length; i++) {\r\n        let child = children[i];\r\n        Array.isArray(child)\r\n            ? concat(child, merge)\r\n            : merge.push(\r\n                  isVDom(child)\r\n                      ? child\r\n                      : isDom(child)\r\n                          ? new VDom(child, {}, \"\")\r\n                          : new VDom(\"\", {}, child || \"\")\r\n              );\r\n    }\r\n    return merge;\r\n}\r\n","import { RECEIVE_PROPS, ELEMENT } from \"./constants\";\r\n\r\nimport { remove, append, replace, root } from \"./utils\";\r\nimport { VDom, h, isDom } from \"./vdom\";\r\n/**\r\n * compares the attributes associated with the 2 render states\r\n * @param {HTMLELement} node\r\n * @param {Object} prev - properties that the node already has\r\n * @param {Object} next - object with the new properties to define the node\r\n * @param {Boolean} [svg] - define if the html element is a svg\r\n * @param {Object} [props] - allows to define if the instance belongs to a component, if so it\r\n *                         will rescue the properties associated to the method `static get props`\r\n *                         through this variable, manages to transfer mutations and new children\r\n *                         associated with it to the component.\r\n */\r\nexport function diffProps(node, prev, next, svg, props) {\r\n    // generates a list of the existing attributes in both versions\r\n    let keys = Object.keys(prev).concat(Object.keys(next));\r\n\r\n    for (let i = 0; i < keys.length; i++) {\r\n        let prop = keys[i];\r\n        if (prev[prop] !== next[prop]) {\r\n            /**\r\n             * Since prop is defined, Atomico will proceed only to take the attributes\r\n             * defined for the component, the undefined ones continue the normal process\r\n             */\r\n            if (props && node._props.indexOf(prop) > -1) {\r\n                props[prop] = next[prop];\r\n                continue;\r\n            }\r\n            if (\r\n                typeof next[prop] === \"function\" ||\r\n                typeof prev[prop] === \"function\"\r\n            ) {\r\n                if (prev[prop]) node.removeEventListener(prop, prev[prop]);\r\n                node.addEventListener(prop, next[prop]);\r\n            } else if (prop in next) {\r\n                if ((prop in node && !svg) || (svg && prop === \"style\")) {\r\n                    if (prop === \"style\") {\r\n                        if (typeof next[prop] === \"object\") {\r\n                            for (let index in next[prop]) {\r\n                                node.style[index] = next[prop][index];\r\n                            }\r\n                        } else {\r\n                            node.style.cssText = next[prop];\r\n                        }\r\n                    } else {\r\n                        node[prop] = next[prop];\r\n                    }\r\n                } else {\r\n                    if (svg && prop === \"xmlns\") continue;\r\n                    svg\r\n                        ? node.setAttributeNS(null, prop, next[prop])\r\n                        : node.setAttribute(prop, next[prop]);\r\n                }\r\n            } else {\r\n                node.removeAttribute(prop);\r\n            }\r\n        }\r\n    }\r\n    if (props) node.dispatch(RECEIVE_PROPS, props);\r\n}\r\n\r\nfunction slot(vdom, root) {\r\n    if (vdom.tag === \"slot\") {\r\n        vdom.tag = root.slots[vdom.props.name] || \"\";\r\n    }\r\n    return vdom;\r\n}\r\n/**\r\n * It allows to compare the 2 states of the render\r\n * @param {HTMLELement} node - will receive the changes that the diff process determines\r\n * @param {Array} master - Previous state of the render\r\n * @param {Array} commit - Next render state\r\n * @param {Boolean} svg - define if the html element is a svg\r\n */\r\nexport function diff(node, master, commit, root = node, svg) {\r\n    let children = node.childNodes || [],\r\n        length = Math.max(master.length, commit.length);\r\n    for (let i = 0; i < length; i++) {\r\n        let prev = master[i] || new VDom(),\r\n            next = commit[i],\r\n            child = children[i];\r\n\r\n        if (next) {\r\n            next = slot(next, root);\r\n            prev = slot(prev, root);\r\n\r\n            let cursor = child,\r\n                // Allows the use of real nodes\r\n                dom = isDom(next.tag);\r\n            svg = svg || next.tag === \"svg\";\r\n            if (prev.tag !== next.tag) {\r\n                if (dom) {\r\n                    cursor = next.tag;\r\n                    child ? replace(node, cursor, child) : append(node, cursor);\r\n                } else if (next.tag) {\r\n                    cursor = svg\r\n                        ? document.createElementNS(\r\n                              \"http://www.w3.org/2000/svg\",\r\n                              next.tag\r\n                          )\r\n                        : document.createElement(next.tag);\r\n                    if (child) {\r\n                        replace(node, cursor, child);\r\n                        // Avoid the merge if the child is a component\r\n                        if (!cursor[ELEMENT]) {\r\n                            while (child.firstChild) {\r\n                                append(cursor, child.firstChild);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        append(node, cursor);\r\n                    }\r\n                } else {\r\n                    cursor = document.createTextNode(\"\");\r\n                    if (prev.tag) {\r\n                        replace(node, cursor, child);\r\n                    } else {\r\n                        append(node, cursor);\r\n                    }\r\n                }\r\n            }\r\n            if (!dom && cursor.nodeName === \"#text\") {\r\n                if (prev.children !== next.children)\r\n                    cursor.textContent = next.children;\r\n            } else {\r\n                diffProps(\r\n                    cursor,\r\n                    prev.props,\r\n                    next.props,\r\n                    svg,\r\n                    // of being an Atomico component, the object is created to transmit the mutations\r\n                    cursor[ELEMENT] && {\r\n                        children: next.children.map(\r\n                            vdom => (vdom.tag ? vdom : vdom.children)\r\n                        )\r\n                    }\r\n                );\r\n                if (!dom && cursor && !cursor[ELEMENT]) {\r\n                    diff(cursor, prev.children, next.children, root, svg);\r\n                }\r\n            }\r\n        } else {\r\n            if (child) remove(node, child);\r\n        }\r\n    }\r\n}\r\n","import { MOUNT, UNMOUNT, RECEIVE_PROPS, ELEMENT } from \"./constants\";\r\n\r\nimport { diff } from \"./diff\";\r\nimport { concat } from \"./vdom\";\r\nimport { getProps, root, append } from \"./utils\";\r\n\r\nexport default class extends HTMLElement {\r\n    constructor() {\r\n        super();\r\n        this[ELEMENT] = true;\r\n        this.state = {};\r\n        this.slots = {};\r\n        this._props = this.constructor.props || [];\r\n        this._render = [];\r\n        this.props = getProps(this._props, this);\r\n        this.props.children = [];\r\n        this.fragment = document.createDocumentFragment();\r\n        while (this.firstChild) {\r\n            let child = this.firstChild,\r\n                slot = child.getAttribute && child.getAttribute(\"slot\");\r\n            if (slot) {\r\n                this.slots[slot] = child;\r\n            }\r\n            append(this.fragment, child);\r\n            this.props.children.push(child);\r\n        }\r\n        this.livecycle();\r\n    }\r\n\r\n    static get observedAttributes() {\r\n        return this.props || [];\r\n    }\r\n    livecycle() {\r\n        let prevent = true;\r\n        this.listeners = [MOUNT, UNMOUNT, RECEIVE_PROPS].map(type => {\r\n            let handler = event => {\r\n                if (event.type !== type) return;\r\n\r\n                if (type === MOUNT) {\r\n                    prevent = false;\r\n                }\r\n\r\n                if (prevent) return;\r\n\r\n                if (this[type]) this[type](event);\r\n\r\n                if (event.defaultPrevented) return;\r\n\r\n                if (type === RECEIVE_PROPS) {\r\n                    this.props = getProps(\r\n                        Object.keys(event.detail),\r\n                        event.detail,\r\n                        { ...this.props }\r\n                    );\r\n                }\r\n                this.setState({});\r\n            };\r\n            this.addEventListener(type, handler);\r\n            return () => this.removeEventListener(type, handler);\r\n        });\r\n    }\r\n    setAttribute(prop, value) {\r\n        if (this._props.indexOf(prop) > -1) {\r\n            this.attributeChangedCallback(prop, this.props[prop], value);\r\n        } else {\r\n            super.setAttribute(prop, value);\r\n        }\r\n    }\r\n    connectedCallback() {\r\n        this.dispatch(MOUNT);\r\n    }\r\n    disconnectedCallback() {\r\n        this.dispatch(UNMOUNT);\r\n        this.listeners.forEach(handler => handler());\r\n    }\r\n    attributeChangedCallback(index, prev, next) {\r\n        if (prev === next) return;\r\n        this.dispatch(RECEIVE_PROPS, getProps([index], { [index]: next }));\r\n    }\r\n    dispatch(type, detail) {\r\n        this.dispatchEvent(\r\n            new CustomEvent(type, {\r\n                cancelable: true,\r\n                detail\r\n            })\r\n        );\r\n    }\r\n    setState(next) {\r\n        if (!next) return;\r\n        this.state = { ...this.state, ...next };\r\n        let render = concat([this.render()]);\r\n        diff(root(this), this._render, render);\r\n        this._render = render;\r\n    }\r\n    render() {}\r\n}\r\n"],"names":["const","ELEMENT","MOUNT","UNMOUNT","RECEIVE_PROPS","getProps","props","element","data","let","dom","HTMLElement","i","length","prop","value","getAttribute","replace","all","letter","toUpperCase","undefined","root","parent","shadowRoot","remove","child","removeChild","append","appendChild","newChild","oldChild","replaceChild","h","tag","VDom","concat","children","this","isDom","nodeType","isVDom","merge","Array","isArray","push","diffProps","node","prev","next","svg","keys","Object","_props","indexOf","removeEventListener","addEventListener","index","style","cssText","setAttributeNS","setAttribute","removeAttribute","dispatch","slot","vdom","slots","name","diff","master","commit","childNodes","Math","max","cursor","document","createElementNS","createElement","firstChild","createTextNode","nodeName","map","textContent","[object Object]","super","state","constructor","_render","fragment","createDocumentFragment","livecycle","observedAttributes","prevent","listeners","type","handler","event","defaultPrevented","detail","setState","attributeChangedCallback","forEach","dispatchEvent","CustomEvent","cancelable","render"],"mappings":"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"}